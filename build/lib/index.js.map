{"version":3,"sources":["../../src/lib/index.js"],"names":["getLink","title","l","replace","toLowerCase","makeARegexFromRule","rule","re","RegExp","source","exactTable","tableRule","exactMethodTitle","titleRule","read","rs","data","Promise","r","j","promise","Catchment","on","res","getStream","path","ls","stream","isDirectory","Pedantry","isFile","gitPush","output","message","stdout","s","trim","git","args","stdio"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,UAAWC,KAAD,IAAW;AAChC,QAAMC,IAAID,MACPE,OADO,CACC,YADD,EACe,EADf,EAEPA,OAFO,CAEC,cAFD,EAEiB,EAFjB,EAGPA,OAHO,CAGC,SAHD,EAGY,EAHZ,EAIPA,OAJO,CAIC,SAJD,EAIY,EAJZ,EAKPA,OALO,CAKC,YALD,EAKe,EALf,EAMPC,WANO,GAOPD,OAPO,CAOC,OAPD,EAOU,GAPV,CAAV;AAQA,SAAOD,CAAP;AACD,CAVM;;;;AAYA,MAAMG,qBAAsBC,IAAD,IAAU;AAC1C,QAAMC,KAAK,IAAIC,MAAJ,CAAY,IAAGF,KAAKC,EAAL,CAAQE,MAAO,EAA9B,CAAX;AACA,SAAOF,EAAP;AACD,CAHM;;;AAKA,MAAMG,aAAaL,mBAAmBM,cAAnB,CAAnB;;AACA,MAAMC,mBAAmBP,mBAAmBQ,oBAAnB,CAAzB;;;AAEA,MAAMC,OAAO,MAAOL,MAAP,IAAkB;AACpC,QAAMM,KAAK,0BAAiBN,MAAjB,CAAX;AACA,QAAMO,OAAO,MAAM,IAAIC,OAAJ,CAAY,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AAC7C,UAAM;AAAEC;AAAF,QAAc,IAAIC,kBAAJ,CAAc;AAAEN;AAAF,KAAd,CAApB;AACAA,OAAGO,EAAH,CAAM,OAAN,EAAeH,CAAf;AACA,UAAMI,MAAM,MAAMH,OAAlB;AACAF,MAAEK,GAAF;AACD,GALkB,CAAnB;AAMA,SAAOP,IAAP;AACD,CATM;;;;AAWA,MAAMQ,YAAaC,IAAD,IAAU;AACjC,QAAMC,KAAK,mBAAUD,IAAV,CAAX;AACA,MAAIE,MAAJ;;AACA,MAAID,GAAGE,WAAH,EAAJ,EAAsB;AACpBD,aAAS,IAAIE,iBAAJ,CAAaJ,IAAb,CAAT;AACD,GAFD,MAEO,IAAIC,GAAGI,MAAH,EAAJ,EAAiB;AACtBH,aAAS,0BAAiBF,IAAjB,CAAT;AACD;;AACD,SAAOE,MAAP;AACD,CATM;;;;AAWA,MAAMI,UAAU,OAAOtB,MAAP,EAAeuB,MAAf,EAAuBC,OAAvB,KAAmC;AACxD,QAAM;AAAEb;AAAF,MAAc,2BAAM,KAAN,EAAa,CAAC,KAAD,EAAQ,aAAR,EAAuB,IAAvB,EAA6B,GAA7B,CAAb,CAApB;AACA,QAAM;AAAEc;AAAF,MAAa,MAAMd,OAAzB;AACA,QAAMe,IAAID,OAAOE,IAAP,EAAV;;AACA,MAAID,KAAKF,OAAT,EAAkB;AAChB,UAAMI,IAAI,OAAJ,EAAa,QAAb,CAAN;AACD;;AACD,QAAMA,IAAI,KAAJ,EAAW5B,MAAX,EAAmBuB,MAAnB,CAAN;AACA,QAAMK,IAAI,QAAJ,EAAc,IAAd,EAAoBJ,OAApB,CAAN;AACA,QAAMI,IAAI,MAAJ,EAAY,IAAZ,CAAN;AACD,CAVM;;;;AAYA,MAAMA,MAAM,OAAO,GAAGC,IAAV,KAAmB;AACpC,QAAM;AAAElB;AAAF,MAAc,2BAAM,KAAN,EAAakB,IAAb,EAAmB;AAAEC,WAAO;AAAT,GAAnB,CAApB;AACA,QAAMnB,OAAN;AACD,CAHM","sourcesContent":["import { createReadStream, lstatSync } from 'fs'\nimport spawn from 'spawncommand'\nimport Catchment from 'catchment'\nimport Pedantry from 'pedantry'\nimport tableRule from './rules/table'\nimport titleRule from './rules/method-title'\n\nexport const getLink = (title) => {\n  const l = title\n    .replace(/<\\/?code>/g, '')\n    .replace(/<\\/?strong>/g, '')\n    .replace(/<br\\/>/g, '')\n    .replace(/&nbsp;/g, '')\n    .replace(/[^\\w-\\d ]/g, '')\n    .toLowerCase()\n    .replace(/[, ]/g, '-')\n  return l\n}\n\nexport const makeARegexFromRule = (rule) => {\n  const re = new RegExp(`^${rule.re.source}`)\n  return re\n}\n\nexport const exactTable = makeARegexFromRule(tableRule)\nexport const exactMethodTitle = makeARegexFromRule(titleRule)\n\nexport const read = async (source) => {\n  const rs = createReadStream(source)\n  const data = await new Promise(async (r, j) => {\n    const { promise } = new Catchment({ rs })\n    rs.on('error', j)\n    const res = await promise\n    r(res)\n  })\n  return data\n}\n\nexport const getStream = (path) => {\n  const ls = lstatSync(path)\n  let stream\n  if (ls.isDirectory()) {\n    stream = new Pedantry(path)\n  } else if (ls.isFile()) {\n    stream = createReadStream(path)\n  }\n  return stream\n}\n\nexport const gitPush = async (source, output, message) => {\n  const { promise } = spawn('git', ['log', '--format=%B', '-n', '1'])\n  const { stdout } = await promise\n  const s = stdout.trim()\n  if (s == message) {\n    await git('reset', 'HEAD~1')\n  }\n  await git('add', source, output)\n  await git('commit', '-m', message)\n  await git('push', '-f')\n}\n\nexport const git = async (...args) => {\n  const { promise } = spawn('git', args, { stdio: 'inherit' })\n  await promise\n}\n"],"file":"index.js"}