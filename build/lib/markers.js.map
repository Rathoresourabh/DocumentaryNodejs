{"version":3,"sources":["../../src/lib/markers.js"],"names":["docMarker","prefix","index","getPrefix","name","d","Date","now","toUpperCase","makeMarker","matcher","re","regExp","RegExp","map","getMarker","lastIndex","makeMarkers","matchers","res","Object","keys","reduce","acc","key","marker","m","makeRule","rule","replacement","match","makeInitialRule"],"mappings":";;;;;;;AAAA;;;;AAIA,MAAMA,YAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AACnC,SAAQ,GAAED,MAAO,IAAGC,KAAM,EAA1B;AACD,CAFD;;AAIA,MAAMC,YAAYC,QAAQ;AACxB,QAAMC,IAAIC,KAAKC,GAAL,EAAV;AACA,SAAQ,kBAAiBH,KAAKI,WAAL,EAAmB,gBAAeH,CAAE,KAA7D;AACD,CAHD;AAKA;;;;;;;;AAMA,MAAMI,aAAa,CAACC,OAAD,EAAUC,EAAV,KAAiB;AAClC,QAAMV,SAASE,UAAUO,OAAV,CAAf;AACA,QAAME,SAAS,IAAIC,MAAJ,CAAY,GAAEZ,MAAO,SAArB,EAA+B,GAA/B,CAAf;AACA,SAAO;AACLU,MADK;AAELC,UAFK;AAGLE,SAAK,EAHA;;AAILC,cAAUb,KAAV,EAAiB;AACf,aAAOF,UAAUC,MAAV,EAAkBC,KAAlB,CAAP;AACD,KANI;;AAOLc,eAAW;AAPN,GAAP;AASD,CAZD;AAcA;;;;;;;AAKO,MAAMC,cAAeC,QAAD,IAAc;AACvC,QAAMC,MAAMC,OAAOC,IAAP,CAAYH,QAAZ,EAAsBI,MAAtB,CAA6B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrD,UAAMb,KAAKO,SAASM,GAAT,CAAX;AACA,UAAMC,SAAShB,WAAWe,GAAX,EAAgBb,EAAhB,CAAf;AACA,UAAMe,IAAI,EACR,GAAGH,GADK;AAER,OAACC,GAAD,GAAOC;AAFC,KAAV;AAIA,WAAOC,CAAP;AACD,GARW,EAQT,EARS,CAAZ;AASA,SAAOP,GAAP;AACD,CAXM;AAaP;;;;;;;;AAIO,MAAMQ,WAAYF,MAAD,IAAY;AAClC,QAAM;AAAEb,YAAQD,EAAV;AAAcG;AAAd,MAAsBW,MAA5B;AACA,QAAMG,OAAO;AACXjB,MADW;;AAEXkB,gBAAYC,KAAZ,EAAmB5B,KAAnB,EAA0B;AACxB,YAAMwB,IAAIZ,IAAIZ,KAAJ,CAAV;AACA,aAAOY,IAAIZ,KAAJ,CAAP;AACA,aAAOwB,CAAP;AACD;;AANU,GAAb;AAQA,SAAOE,IAAP;AACD,CAXM;AAaP;;;;;;;;AAIO,MAAMG,kBAAmBN,MAAD,IAAY;AACzC,QAAM;AAAEd,MAAF;AAAMG,OAAN;AAAWC;AAAX,MAAyBU,MAA/B;AACA,QAAMG,OAAO;AACXjB,MADW;;AAEXkB,gBAAYC,KAAZ,EAAmB;AACjB,YAAM;AAAEd;AAAF,UAAgBS,MAAtB;AACAX,UAAIE,SAAJ,IAAiBc,KAAjB;AACAL,aAAOT,SAAP,IAAoB,CAApB;AACA,YAAMU,IAAIX,UAAUC,SAAV,CAAV;AACA,aAAOU,CAAP;AACD;;AARU,GAAb;AAUA,SAAOE,IAAP;AACD,CAbM;AAeP;;;;;;;;;AAUA;AAEA","sourcesContent":["/**\n * Make a unique marker for replacements.\n * @param {string} name\n */\nconst docMarker = (prefix, index) => {\n  return `${prefix}-${index}`\n}\n\nconst getPrefix = name => {\n  const d = Date.now()\n  return `%%_DOCUMENTARY_${name.toUpperCase()}_REPLACEMENT_${d}_%%`\n}\n\n/**\n * Create a new marker\n * @param {string} matcher name of the matcher, used in the doc marker.\n * @param {RegExp} re a regular expression used for detection\n * @return {Marker} A marker\n */\nconst makeMarker = (matcher, re) => {\n  const prefix = getPrefix(matcher)\n  const regExp = new RegExp(`${prefix}-(\\\\d+)`, 'g')\n  return {\n    re,\n    regExp,\n    map: {},\n    getMarker(index) {\n      return docMarker(prefix, index)\n    },\n    lastIndex: 0,\n  }\n}\n\n/**\n * Make markers from configuration object.\n * @param {Object.<string, RegExp>} matchers An object with types of markers to create as keys and their detection regexes as values.\n * @returns {Object.<string, Marker>} An object with markers for each requested type.\n */\nexport const makeMarkers = (matchers) => {\n  const res = Object.keys(matchers).reduce((acc, key) => {\n    const re = matchers[key]\n    const marker = makeMarker(key, re)\n    const m = {\n      ...acc,\n      [key]: marker,\n    }\n    return m\n  }, {})\n  return res\n}\n\n/**\n * Make a rule for replacing markers backwards\n * @param {Marker} marker\n */\nexport const makeRule = (marker) => {\n  const { regExp: re, map } = marker\n  const rule = {\n    re,\n    replacement(match, index) {\n      const m = map[index]\n      delete map[index]\n      return m\n    },\n  }\n  return rule\n}\n\n/**\n * Make a rule for replacing markers backwards\n * @param {Marker} marker\n */\nexport const makeInitialRule = (marker) => {\n  const { re, map, getMarker } = marker\n  const rule = {\n    re,\n    replacement(match) {\n      const { lastIndex } = marker\n      map[lastIndex] = match\n      marker.lastIndex += 1\n      const m = getMarker(lastIndex)\n      return m\n    },\n  }\n  return rule\n}\n\n/**\n * A marker\n * @typedef {Object} Marker\n * @property {(index) => string} getMarker a function to generate markers which can be then found.\n * @property {RegExp} re the regular expression used for detection of the match\n * @property {RegExp} regExp regex to replace the marker back to its original value\n * @property {object} map a map which holds the detected matches at their indexes.\n * @property {number} lastIndex An index of last inserted element. Starts with 0.\n */\n\n// * @property {string} marker a string used to replace the original match\n\n// * @property {string[]} array an array of matches where matches should be pushed upon detection\n"],"file":"markers.js"}