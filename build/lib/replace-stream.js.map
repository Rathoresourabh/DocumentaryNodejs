{"version":3,"sources":["../../src/lib/replace-stream.js"],"names":["createReplaceStream","toc","tocRule","table","methodTitle","code","innerCode","linkTitle","tableRe","methodTitleRe","codeRe","innerCodeRe","linkTitleRe","cutCode","cutTable","cutMethodTitle","cutInnerCode","map","marker","rule","insertCode","insertTable","insertMethodTitle","insertInnerCode","s","Replaceable","stripComments","badgeRule","treeRule","exampleRule","forkRule","gifRule","typeRule","typedefMdRule","tableRule","re","replacement","match","name","types","title","ic","RegExp","regExp","source","exec","link","i","val","linkRe","methodTitleRule","on","forEach","type"],"mappings":"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","sourcesContent":["import { Replaceable } from 'restream'\nimport { createTocRule, commentRule as stripComments, codeRe, innerCodeRe, linkTitleRe, linkRe } from './rules'\nimport tableRule, { tableRe } from './rules/table'\nimport methodTitleRule, { methodTitleRe } from './rules/method-title'\nimport treeRule from './rules/tree'\nimport exampleRule from './rules/example'\nimport { makeRule, makeInitialRule, makeMarkers } from './markers'\nimport forkRule from './rules/fork'\nimport { getLink } from '.'\nimport gifRule from './rules/gif'\nimport typeRule from './rules/type'\nimport badgeRule from './rules/badge'\nimport typedefMdRule from './rules/typedef-md'\n\nexport default function createReplaceStream(toc) {\n  const tocRule = createTocRule(toc)\n\n  const {\n    table, methodTitle, code, innerCode, linkTitle,\n  } = makeMarkers({\n    table: tableRe,\n    methodTitle: methodTitleRe,\n    code: codeRe,\n    innerCode: innerCodeRe,\n    linkTitle: linkTitleRe,\n  })\n\n  /* below have ``` in them, therefore we want more control over handling them\n   * so that Replaceable does not confuse them with the code blocks.\n   */\n  const [cutCode, cutTable, cutMethodTitle, cutInnerCode] =\n    [code, table, methodTitle, innerCode, linkTitle].map((marker) => {\n      const rule = makeInitialRule(marker)\n      return rule\n    })\n  const [insertCode, insertTable, insertMethodTitle, insertInnerCode] =\n    [code, table, methodTitle, innerCode, linkTitle].map((marker) => {\n      const rule = makeRule(marker)\n      return rule\n    })\n\n  const s = new Replaceable([\n    cutInnerCode,\n    cutTable,\n    cutMethodTitle,\n    cutCode,\n    stripComments,\n\n    badgeRule,\n    treeRule,\n    exampleRule,\n    forkRule,\n    tocRule,\n    gifRule,\n    typeRule,\n\n    insertTable,\n    typedefMdRule, // places a table hence just before table\n    tableRule,\n    { // a hackish way to update types property tables to include links to seen types.\n      re: /\\| _(\\w+)_ \\|/g,\n      replacement(match, name) {\n        if (!(name in this.types)) return match\n        return `| _[${name}](#${getLink(name)})_ |`\n      },\n    },\n    {\n      re: linkTitleRe,\n      replacement(match, title) {\n        const ic = new RegExp(innerCode.regExp.source).exec(title) // test please\n        let link\n        if (!ic) {\n          link = getLink(title)\n        } else {\n          const [, i] = ic\n          const val = innerCode.map[i]\n          link = getLink(val)\n        }\n        return `<a name=\"${link}\">${title}</a>`\n      },\n    },\n    {\n      re: linkRe, // make links\n      replacement(match, title) {\n        // check why is needed to use innerCode re above\n        const link = getLink(title)\n        return `<a name=\"${link}\">${title}</a>`\n      },\n    },\n    insertMethodTitle,\n    methodTitleRule,\n\n    insertCode,\n    insertInnerCode,\n    // those found inside of code blocks\n    insertTable,\n    insertMethodTitle,\n  ])\n\n  s.types = {}\n  s.on('types', (types) => {\n    types.forEach((type) => {\n      s.types[type] = true\n    })\n  })\n\n  return s\n}\n\n// {\n//   re: /[\\s\\S]*/,\n//   replacement(match) {\n//     debugger\n//     return match\n//   },\n// },\n"],"file":"replace-stream.js"}