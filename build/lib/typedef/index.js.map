{"version":3,"sources":["../../../src/lib/typedef/index.js"],"names":["getNameWithDefault","name","defaultValue","type","parentParam","n","hasDefault","undefined","isPrimitive","Number","isInteger","includes","d","nn","getPropType","number","string","boolean"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBO,MAAMA,qBAAqB,CAACC,IAAD,EAAOC,YAAP,EAAqBC,IAArB,EAA2BC,WAA3B,KAA2C;AAC3E,QAAMC,IAAK,GAAED,cAAe,GAAEA,WAAY,GAA7B,GAAkC,EAAG,GAAEH,IAAK,EAAzD;AAEA,QAAMK,aAAaJ,iBAAiBK,SAApC;AACA,MAAI,CAACD,UAAL,EAAiB,OAAOD,CAAP;AAEjB,QAAMG,cAAcC,OAAOC,SAAP,CAAiBR,YAAjB,KACfA,iBAAiB,IADF,IAEfA,iBAAiB,KAFF,IAGf,CAAC,QAAD,EAAW,SAAX,EAAsBS,QAAtB,CAA+BR,IAA/B,CAHL;AAIA,QAAMS,IAAIJ,cAAcN,YAAd,GAA8B,IAAGA,YAAa,GAAxD;AACA,QAAMW,KAAM,GAAER,CAAE,IAAGO,CAAE,EAArB;AACA,SAAOC,EAAP;AACD,CAbM;;;;AAeA,MAAMC,cAAc,CAAC;AAAEC,QAAF;AAAUC,QAAV;AAAkBC,SAAlB;AAA2Bd;AAA3B,CAAD,KAAuC;AAChE,MAAIa,MAAJ,EAAY,OAAO,QAAP;AACZ,MAAID,MAAJ,EAAY,OAAO,QAAP;AACZ,MAAIE,OAAJ,EAAa,OAAO,SAAP;AACb,MAAId,IAAJ,EAAU,OAAOA,IAAP;AACV,SAAO,GAAP;AACD,CANM","sourcesContent":["/**\n * Return a name of a property with its default value, and surrounded by square brackets if default is given. If type is boolean or number, the default value is not surrounded by \"\".\n * @param {string} name Name of the property.\n * @param {*} defaultValue Default of the property.\n * @param {string} type Type of the property.\n * @example\n *\n * requiredParam\n * [optionalDefaultParam=false]\n * [optionalDefaultParamString=\"test\"]\n * [optionalParam]\n *\n * parentParam.requiredParam\n * [parentParam.optionalDefaultParam=false]\n * [parentParam.optionalDefaultParamString=\"test\"]\n * [parentParam.optionalParam]\n */\nexport const getNameWithDefault = (name, defaultValue, type, parentParam) => {\n  const n = `${parentParam ? `${parentParam}.` : ''}${name}`\n\n  const hasDefault = defaultValue !== undefined\n  if (!hasDefault) return n\n\n  const isPrimitive = Number.isInteger(defaultValue)\n    || defaultValue === true\n    || defaultValue === false\n    || ['number', 'boolean'].includes(type)\n  const d = isPrimitive ? defaultValue : `\"${defaultValue}\"`\n  const nn = `${n}=${d}`\n  return nn\n}\n\nexport const getPropType = ({ number, string, boolean, type }) => {\n  if (string) return 'string'\n  if (number) return 'number'\n  if (boolean) return 'boolean'\n  if (type) return type\n  return '*'\n}\n"],"file":"index.js"}