{"version":3,"sources":["../../../src/lib/rules/type.js"],"names":["LOG","typeRe","tag","t","s","strong","getDescAndExample","description","example","isExampleRow","hasExamples","span2","makeTable","properties","tocTitles","some","rows","map","name","type","required","n","nn","e","startsWith","join","typeRule","re","replacement","match","body","tags","content","props","row","table","err","message"],"mappings":"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","sourcesContent":["import { debuglog } from 'util'\nimport extractTags from 'rexml'\n\nconst LOG = debuglog('doc')\n\nconst typeRe = /^%TYPE( .+)?\\n([\\s\\S]+?)\\n%$/mg\n\nexport { typeRe }\n\nconst tag = (t, s) => `<${t}>${s}</${t}>`\nconst strong = s => tag('strong', s)\n\nconst getDescAndExample = (description, example, isExampleRow, hasExamples) => {\n  const span2 = hasExamples ? ' colspan=\"2\"' : ''\n  if (!example) {\n    return `<td${span2}>${description}</td>`\n  }\n  if (isExampleRow) {\n    return `<td${span2}>${description}</td>\n  </tr>\n  <tr></tr>\n  <tr>\n   <td colspan=\"${hasExamples ? 4 : 3}\">${example}</td>`\n  }\n  return `<td>${description}</td>\n   <td>${example}</td>`\n}\n\nconst makeTable = (properties, tocTitles) => {\n  const hasExamples = properties.some(({ example, isExampleRow }) => example && !isExampleRow)\n  const rows = properties.map(({ name, type, required, description = '', example = '', isExampleRow }) => {\n    const t = `<code>${required ? `${name}*` : name}</code>`\n    const n = required ? strong(t) : t\n    const nn = tocTitles ? `[${n}](t)` : n\n    const e = example.startsWith('```') ? `\\n\\n${example}`: example\n    return `  <tr>\n   <td>${nn}</td>\n   <td>${tag('em', type)}</td>\n   ${getDescAndExample(description, e, isExampleRow, hasExamples)}\n  </tr>`\n  })\n  return `<table>\n <thead>\n  <tr>\n   <th>Property</th>\n   <th>Type</th>\n   <th>Description</th>${hasExamples ? '\\n   <th>Example</th>' : ''}\n  </tr>\n </thead>\n <tbody>\n${rows.join('\\n')}\n </tbody>\n</table>\n`\n}\n\nconst typeRule = {\n  re: typeRe,\n  replacement(match, tocTitles, body) {\n    try {\n      const tags = extractTags('p', body)\n        .map(({ content, props }) => {\n          const [{ content: description } = {}] = extractTags('d', content)\n          const [{ content: example, props: { row: isExampleRow = false } = {} } = {}] = extractTags('e', content)\n          return {\n            description,\n            example,\n            isExampleRow,\n            ...props,\n          }\n        })\n      const table = makeTable(tags, tocTitles)\n      return table\n    } catch (err) {\n      LOG('Could not parse type, %s', err.message)\n      return match\n    }\n  },\n}\n\n// const b = (summary, alt, gif) => {\n//   return `\n// <details>\n//   <summary>${summary}</summary>\n//   <table>\n//   <tr><td>\n//     <img alt=\"${alt}\" src=\"${gif}\" />\n//   </td></tr>\n//   </table>\n// </details>\n// `.trim()\n// }\n\nexport default typeRule\n"],"file":"type.js"}