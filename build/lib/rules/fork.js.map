{"version":3,"sources":["../../../src/lib/rules/fork.js"],"names":["forkRule","re","replacement","match","lang","m","mod","args","split","promise","execArgv","stdio","stdout","codeSurround","trim"],"mappings":";;;;;;;AAAA;;AACA;AAEA;AAEA,MAAMA,WAAW;AACfC,MAAI,0BADW;;AAEf,QAAMC,WAAN,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,CAA/B,EAAkC;AAChC,UAAM,CAACC,GAAD,EAAM,GAAGC,IAAT,IAAiBF,EAAEG,KAAF,CAAQ,GAAR,CAAvB;AACA,UAAM;AAAEC;AAAF,QAAc,wBAAKH,GAAL,EAAUC,IAAV,EAAgB;AAClCG,gBAAU,EADwB;AAElCC,aAAO;AAF2B,KAAhB,CAApB;AAIA,UAAM;AAAEC;AAAF,QAAa,MAAMH,OAAzB;AACA,WAAOI,aAAaD,MAAb,EAAqBR,IAArB,CAAP;AACD;;AAVc,CAAjB;;AAaA,MAAMS,eAAe,CAACR,CAAD,EAAID,OAAO,EAAX,KAAmB,SAAQA,IAAK,KAAIC,EAAES,IAAF,EAAS,UAAlE;;eAEed,Q","sourcesContent":["import { fork } from 'spawncommand'\n// import { debuglog } from 'util'\n\n// const LOG = debuglog('doc')\n\nconst forkRule = {\n  re: /%FORK(?:-(\\w+))? (.+)%/mg,\n  async replacement(match, lang, m) {\n    const [mod, ...args] = m.split(' ')\n    const { promise } = fork(mod, args, {\n      execArgv: [],\n      stdio: 'pipe',\n    })\n    const { stdout } = await promise\n    return codeSurround(stdout, lang)\n  },\n}\n\nconst codeSurround = (m, lang = '') => `\\`\\`\\`${lang}\\n${m.trim()}\\n\\`\\`\\``\n\nexport default forkRule\n"],"file":"fork.js"}