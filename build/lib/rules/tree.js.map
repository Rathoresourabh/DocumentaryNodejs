{"version":3,"sources":["../../../src/lib/rules/tree.js"],"names":["LOG","treeRule","re","replacement","match","m","args","split","p","stdout","promise","test","join","codeSurround","err","code","console","warn","message","lang","trim"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;AAEA,MAAMC,WAAW;AACfC,MAAI,eADW;;AAEf,QAAMC,WAAN,CAAkBC,KAAlB,EAAyBC,CAAzB,EAA4B;AAC1B,UAAMC,OAAOD,EAAEE,KAAF,CAAQ,GAAR,CAAb;AACA,UAAMC,IAAI,2BAAM,MAAN,EAAc,CAAC,YAAD,EAAe,GAAGF,IAAlB,CAAd,CAAV;;AACA,QAAI;AACF,YAAM;AAAEG;AAAF,UAAa,MAAMD,EAAEE,OAA3B;;AACA,UAAI,wBAAwBC,IAAxB,CAA6BF,MAA7B,CAAJ,EAA0C;AACxCT,YAAI,kCAAJ,EAAwCM,KAAKM,IAAL,CAAU,GAAV,CAAxC;AACA,eAAOR,KAAP;AACD;;AACD,aAAOS,aAAaJ,MAAb,CAAP;AACD,KAPD,CAOE,OAAOK,GAAP,EAAY;AACZ,UAAIA,IAAIC,IAAJ,IAAY,QAAhB,EAA0B;AACxBC,gBAAQC,IAAR,CAAa,uBAAb;AACA,eAAOb,KAAP;AACD;;AACDJ,UAAIc,IAAII,OAAR;AACA,aAAOd,KAAP;AACD;AACF;;AApBc,CAAjB;;AAuBA,MAAMS,eAAe,CAACR,CAAD,EAAIc,OAAO,GAAX,KAAoB,SAAQA,IAAK,KAAId,EAAEe,IAAF,EAAS,UAAnE;;eAEenB,Q","sourcesContent":["import spawn from 'spawncommand'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('doc')\n\nconst treeRule = {\n  re: /%TREE (.+)%/mg,\n  async replacement(match, m) {\n    const args = m.split(' ')\n    const p = spawn('tree', ['--noreport', ...args])\n    try {\n      const { stdout } = await p.promise\n      if (/\\[error opening dir\\]/.test(stdout)) {\n        LOG('Could not generate a tree for %s', args.join(' '))\n        return match\n      }\n      return codeSurround(stdout)\n    } catch (err) {\n      if (err.code == 'ENOENT') {\n        console.warn('tree is not installed')\n        return match\n      }\n      LOG(err.message)\n      return match\n    }\n  },\n}\n\nconst codeSurround = (m, lang = 'm') => `\\`\\`\\`${lang}\\n${m.trim()}\\n\\`\\`\\``\n\nexport default treeRule\n"],"file":"tree.js"}