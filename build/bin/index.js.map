{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","source","_source","output","_output","toc","_toc","watch","_watch","push","_push","version","_version","extract","_extract","generate","_generate","_argv","console","log","exit","argv","find","a","g","err","message","doc","justToc","Error","stream","destination","stack","code","debounce","recursive"],"mappings":"AAAA;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;AACA,MAAMC,QAAQ,MAAMC,IAAN,CAAWC,QAAQC,GAAR,CAAYC,UAAvB,CAAd;AAEA,MAAM;AACJC,UAAQC,OADJ;AAEJC,UAAQC,OAFJ;AAGJC,OAAKC,IAHD;AAIJC,SAAOC,MAJH;AAKJC,QAAMC,KALF;AAMJC,WAASC,QANL;AAOJC,WAASC;AAPL,IAQF,uBARJ;AAUA,IAAI;AACFC,YAAUC,SADR;AAEFC;AAFE,IAGA,uBAHJ;;AAKA,IAAIL,QAAJ,EAAc;AACZM,UAAQC,GAAR,CAAYR,gBAAZ;AACAb,UAAQsB,IAAR,CAAa,CAAb;AACD;;AAED,IAAItB,QAAQuB,IAAR,CAAaC,IAAb,CAAkBC,KAAKA,KAAK,IAA5B,KAAqC,CAACb,KAA1C,EAAiD;AAC/C,wBAAQ,kCAAR;AACD;;AACD,IAAIZ,QAAQuB,IAAR,CAAaC,IAAb,CAAkBC,KAAKA,KAAK,IAA5B,KAAqC,CAACT,QAA1C,EAAoD;AAClD,wBAAQ,0DAAR;AACD;;AAED,IAAIG,MAAMK,IAAN,CAAWE,KAAKA,KAAK,IAArB,KAA8B,CAACR,SAAnC,EAA8C;AAC5CA,cAAYd,OAAZ;AACD;;AAED,IAAIA,OAAJ,EAAa;AACX,MAAI;AACF,uBAAUA,OAAV;AACD,GAFD,CAEE,OAAOuB,GAAP,EAAY;AACZ,QAAIA,IAAIC,OAAR,EAAiBD,IAAIC,OAAJ,GAAe,wBAAuBxB,OAAQ,KAAIuB,IAAIC,OAAQ,EAA9D;AACjB,0BAAQD,GAAR;AACD;AACF;;AAED,MAAME,MAAM,OAAO1B,MAAP,EAAeE,MAAf,EAAuByB,UAAU,KAAjC,KAA2C;AACrD,MAAI,CAAC3B,MAAL,EAAa;AACX,UAAM,IAAI4B,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,QAAMC,SAAS,oBAAU7B,MAAV,CAAf;AACA,QAAM,kBAAI6B,MAAJ,EAAY3B,MAAZ,EAAoByB,OAApB,CAAN;AACD,CAND;;AAQA,CAAC,YAAY;AACX,MAAId,QAAJ,EAAc;AACZ,UAAM,uBAAe;AACnBb,cAAQC,OADW;AAEnB6B,mBAAajB;AAFM,KAAf,CAAN;AAIA;AACD;;AACD,MAAIE,SAAJ,EAAe;AACb,UAAM,wBAAgB;AACpBf,cAAQC,OADY;AAEpB6B,mBAAaf;AAFO,KAAhB,CAAN;AAIA;AACD;;AACD,MAAI;AACF,UAAMW,IAAIzB,OAAJ,EAAaE,OAAb,EAAsBE,IAAtB,CAAN;AACD,GAFD,CAEE,OAAO;AAAE0B,SAAF;AAASN,WAAT;AAAkBO;AAAlB,GAAP,EAAiC;AACjCrC,YAAQD,IAAIqC,KAAJ,CAAR,GAAqBd,QAAQC,GAAR,CAAYO,OAAZ,CAArB;AACD;;AAED,MAAIQ,WAAW,KAAf;;AACA,MAAI1B,UAAUE,KAAd,EAAqB;AACnB;AACA,mBAAMR,OAAN,EAAe;AAAEiC,iBAAW;AAAb,KAAf,EAAoC,YAAY;AAC9C,UAAI,CAACD,QAAL,EAAe;AACbA,mBAAW,IAAX;AACA,cAAMP,IAAIzB,OAAJ,EAAaE,OAAb,EAAsBE,IAAtB,CAAN;;AACA,YAAII,KAAJ,EAAW;AACTQ,kBAAQC,GAAR,CAAY,gCAAZ;AACA,gBAAM,kBAAQjB,OAAR,EAAiBE,OAAjB,EAA0BM,KAA1B,CAAN;AACD;;AACDwB,mBAAW,KAAX;AACD;AACF,KAVD;AAWD;AACF,CApCD","sourcesContent":["#!/usr/bin/env node\nimport { watch } from 'fs'\nimport { debuglog } from 'util'\nimport { lstatSync } from 'fs'\nimport run from './run'\nimport getArgs from './get-args'\nimport generateTypedef from './run/generate'\nimport extractTypedef from './run/extract'\nimport { version } from '../../package.json'\nimport catcher from './catcher'\nimport { getStream, gitPush } from '../lib'\n\nconst LOG = debuglog('doc')\nconst DEBUG = /doc/.test(process.env.NODE_DEBUG)\n\nconst {\n  source: _source,\n  output: _output,\n  toc: _toc,\n  watch: _watch,\n  push: _push,\n  version: _version,\n  extract: _extract,\n} = getArgs()\n\nlet {\n  generate: _generate,\n  _argv,\n} = getArgs()\n\nif (_version) {\n  console.log(version)\n  process.exit(0)\n}\n\nif (process.argv.find(a => a == '-p') && !_push) {\n  catcher('Please specify a commit message.')\n}\nif (process.argv.find(a => a == '-e') && !_extract) {\n  catcher('Please specify where to extract typedefs (- for stdout).')\n}\n\nif (_argv.find(g => g == '-g') && !_generate) {\n  _generate = _source\n}\n\nif (_source) {\n  try {\n    lstatSync(_source)\n  } catch (err) {\n    if (err.message) err.message = `Could not read input ${_source}: ${err.message}`\n    catcher(err)\n  }\n}\n\nconst doc = async (source, output, justToc = false) => {\n  if (!source) {\n    throw new Error('Please specify an input file.')\n  }\n  const stream = getStream(source)\n  await run(stream, output, justToc)\n}\n\n(async () => {\n  if (_extract) {\n    await extractTypedef({\n      source: _source,\n      destination: _extract,\n    })\n    return\n  }\n  if (_generate) {\n    await generateTypedef({\n      source: _source,\n      destination: _generate,\n    })\n    return\n  }\n  try {\n    await doc(_source, _output, _toc)\n  } catch ({ stack, message, code }) {\n    DEBUG ? LOG(stack) : console.log(message)\n  }\n\n  let debounce = false\n  if (_watch || _push) {\n    // also watch referenced example files.\n    watch(_source, { recursive: true }, async () => {\n      if (!debounce) {\n        debounce = true\n        await doc(_source, _output, _toc)\n        if (_push) {\n          console.log('Pushing documentation changes.')\n          await gitPush(_source, _output, _push)\n        }\n        debounce = false\n      }\n    })\n  }\n})()\n"],"file":"index.js"}