{"version":3,"sources":["../../../src/bin/run/generate.js"],"names":["LOG","generateTypedef","config","source","destination","stream","console","log","process","exit","s","readable","pipe","p","Promise","r","j","on","e","error","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;AAEA;;;;;;;;AAOA,eAAeC,eAAf,CAA+BC,MAA/B,EAAuC;AACrC,QAAM;AACJC,UADI;AAEJC,kBAAcD,MAFV;AAGJE;AAHI,MAIFH,MAJJ;;AAKA,MAAI;AACF,QAAI,CAACC,MAAD,IAAW,CAACE,MAAhB,EAAwB;AACtBC,cAAQC,GAAR,CAAY,sDAAZ;AACAC,cAAQC,IAAR,CAAa,CAAb;AACD;;AAED,UAAMC,IAAI,0BAAiBP,MAAjB,CAAV;AACA,UAAMQ,WAAW,+BAAjB;AACAD,MAAEE,IAAF,CAAOD,QAAP;AAEA,UAAME,IAAI,0BAAY;AACpBV,YADoB;AAEpBE,YAFoB;AAGpBM,cAHoB;AAIpBP;AAJoB,KAAZ,CAAV;AAOA,UAAM,IAAIU,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1BL,eAASM,EAAT,CAAY,OAAZ,EAAqBC,KAAK;AAAElB,YAAI,sBAAJ;AAA6BgB,UAAEE,CAAF;AAAM,OAA/D;AACAR,QAAEO,EAAF,CAAK,OAAL,EAAcC,KAAK;AAAElB,YAAI,eAAJ;AAAsBgB,UAAEE,CAAF;AAAM,OAAjD;AACAP,eAASM,EAAT,CAAY,KAAZ,EAAmBF,CAAnB;AACD,KAJK,CAAN;AAMA,UAAMF,CAAN;;AAEA,QAAIR,MAAJ,EAAY;AACVL,UAAI,sBAAJ,EAA4BG,MAA5B;AACD,KAFD,MAEO,IAAIA,UAAUC,WAAd,EAA2B;AAChCE,cAAQa,KAAR,CAAc,8BAAd,EAA8ChB,MAA9C;AACD,KAFM,MAEA,IAAIC,eAAe,GAAnB,EAAwB;AAC7BE,cAAQa,KAAR,CAAc,uBAAd,EAAuChB,MAAvC;AACD,KAFM,MAEA;AACLG,cAAQa,KAAR,CAAc,oBAAd,EAAoCf,WAApC;AACD;AACF,GAlCD,CAkCE,OAAOgB,GAAP,EAAY;AACZ,0BAAQA,GAAR;AACD;AACF;AAED;;;;;;;eAMenB,e","sourcesContent":["import { createReadStream } from 'fs'\nimport { debuglog } from 'util'\nimport createJsReplaceStream from '../../lib/js-replace-stream'\nimport catcher from '../catcher'\nimport whichStream from './which-stream'\n\nconst LOG = debuglog('doc')\n\n/**\n * Process a JavaScript file to include `@typedef`s found with the `/* documentary types.xml *\\/` marker.\n * @param {Config} config Configuration Object.\n * @param {string} config.source Path to the source JavaScript file.\n * @param {string} [config.destination] Path to the source JavaScript file. If not specified, source is assumed (overwriting the original file).\n * @param {string} [config.stream] An output stream to which to write instead of a location from `generateTo`.\n */\nasync function generateTypedef(config) {\n  const {\n    source,\n    destination = source,\n    stream,\n  } = config\n  try {\n    if (!source && !stream) {\n      console.log('Please specify a JavaScript file or a pass a stream.')\n      process.exit(1)\n    }\n\n    const s = createReadStream(source)\n    const readable = createJsReplaceStream()\n    s.pipe(readable)\n\n    const p = whichStream({\n      source,\n      stream,\n      readable,\n      destination,\n    })\n\n    await new Promise((r, j) => {\n      readable.on('error', e => { LOG('Error in Replaceable'); j(e) })\n      s.on('error', e => { LOG('Error in Read'); j(e) })\n      readable.on('end', r)\n    })\n\n    await p\n\n    if (stream) {\n      LOG('%s written to stream', source)\n    } else if (source == destination) {\n      console.error('Updated %s to include types.', source)\n    } else if (destination == '-') {\n      console.error('Written %s to stdout.', source)\n    } else {\n      console.error('Saved output to %s', destination)\n    }\n  } catch (err) {\n    catcher(err)\n  }\n}\n\n/**\n * @typedef {Object} Config\n * @prop {string} source Path to the source JavaScript file.\n * @prop {string} [output] Path to the source JavaScript file.\n */\n\nexport default generateTypedef\n"],"file":"generate.js"}